/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hospitaldatabaseapplication;

import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Elvis
 */
public class DoctorAppointmentFrame extends javax.swing.JFrame {

    //This String variable will hold whatever valid doctor ID is given to it from the previous doctor login screen
    private String doctorId = "";
    
    /**
     * Creates new form DoctorAppointmentFrame
     */
    public DoctorAppointmentFrame(String doctorId) {
        initComponents();
        //This constructor assigns the valid doctor id from doctor login to this variable below, It also formats it so it can be used in an sql select statement
        this.doctorId = "'"+doctorId+"'";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        BackButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        AppointmentSearch = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Appointment ID", "Insurance ID", "Doctor ID", "Date & Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
        }

        BackButton.setText("Back");
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("Doctor Menu");

        AppointmentSearch.setText("Search for your Appointments");
        AppointmentSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AppointmentSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 576, Short.MAX_VALUE)
                .addGap(14, 14, 14))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(BackButton)
                        .addGap(121, 121, 121)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(188, 188, 188)
                        .addComponent(AppointmentSearch)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(BackButton)
                        .addGap(35, 35, 35))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AppointmentSearch)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButtonActionPerformed
        //This button returns the user to the Doctor Login Screen when they press it
        
        //This makes the doctor appointment frame invisible
        this.setVisible(false);

        //This creates a new instance of doctor login class and makes the doctor login frame visible to the user
        DoctorLogin dL = new DoctorLogin();
        dL.setVisible(true);
    }//GEN-LAST:event_BackButtonActionPerformed

    private void AppointmentSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AppointmentSearchActionPerformed
        
        //used to hold how many columns are needed 
        int c = 0;

        //creates a new connection to the database
        HospitalConnection connection1 = new HospitalConnection();

        //Holds a resultset from the select statement on all rows from appointment that have a doctor id like the one used to login
        ResultSet resultset = connection1.SelectStatement("*", "Appointment", "doc_id LIKE "+this.doctorId);

        try {
            
            //New instance from the result set meta data class used to input information into the JTable on this Jframe
            ResultSetMetaData Rss = resultset.getMetaData();

            //Used to hold all the columns 
            c = Rss.getColumnCount();

            //Used to access the JTable 
            DefaultTableModel Df = (DefaultTableModel)jTable1.getModel();

            //Sets rows count to equal column count
            Df.setRowCount(c);

            //While loop used to loop through every row and assign it to the JTable
            while(resultset.next()){
                Vector v2 = new Vector();

                //For loop used to loop through each row an assign their column value to the JTable
                for(int a = 1; a <= c; a++){

                    //This allows us to get the value from each resultset that comes from these columns in the database
                    v2.add(resultset.getString("Appointment_Id"));
                    v2.add(resultset.getString("Insurance_Id"));
                    v2.add(resultset.getString("Doc_Id"));
                    v2.add(resultset.getString("Date_Time"));
                }

                Df.addRow(v2);
            }

        } catch (SQLException ex) {
            Logger.getLogger(DoctorAppointmentFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        //Ends connection to the database once the select statement has been used
        connection1.EndConnection();
    }//GEN-LAST:event_AppointmentSearchActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AppointmentSearch;
    private javax.swing.JButton BackButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
